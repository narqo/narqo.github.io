<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Random on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/random/</link><description>Recent content in Random on Vladimir Varankin</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 20 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/random/index.xml" rel="self" type="application/rss+xml"/><item><title>Twitter graffiti</title><link>https://vladimir.varank.in/notes/2024/01/twitter-graffiti/</link><pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2024/01/twitter-graffiti/</guid><description>&lt;p>A post on Twitter is graffiti on a public wall. A post in a personal blog is a sketch in your own notebook. Both can be raw or well-planned, be dumb or deep. But one is graffiti on a public wall, and another is a sketch in your own notebook.&lt;/p></description></item><item><title>Bookmarks (issue 8)</title><link>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</guid><description>&lt;p>&lt;a href="https://changelog.com/podcast/510">Taking Postgres serverless&lt;/a> (Changelog). &lt;a href="https://www.youtube.com/watch?v=rES0yzeERns">Neon: Serverless PostgreSQL&lt;/a> (Heikki Linnakangas @ Carnegie Mellon University).&lt;/p>
&lt;p>&lt;a href="https://brooker.co.za/blog/2022/04/11/simulation.html">Simple simulations for system builders&lt;/a> (&lt;a href="https://twitter.com/MarcJBrooker">Marc Brooker&lt;/a>). System designers care about questions like &amp;ldquo;How will the system behave under overload?&amp;rdquo; or &amp;ldquo;How sensitive is the design to latency?&amp;rdquo;. By &amp;ldquo;writing small simulators that simulate the behaviour of simple models&amp;rdquo;, Marc shows an approach to explore and reason about the possible answers to such questions.&lt;/p>
&lt;p>&lt;a href="https://fasterthanli.me/articles/the-http-crash-course-nobody-asked-for">The HTTP crash course nobody asked for&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://www.industrialempathy.com/posts/design-docs-at-google/">Design docs at Google&lt;/a>. When not to write a design doc: A clear indicator that a doc might &lt;em>not&lt;/em> be necessary is when a design doc is an implementation manual, that doesn&amp;rsquo;t go into trade-offs, alternatives, and explanation of the decision-making; â€” write the actual application instead.&lt;/p></description></item><item><title>Working on a new thing</title><link>https://vladimir.varank.in/notes/2022/09/working-on-a-new-thing/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/09/working-on-a-new-thing/</guid><description>&lt;p>Number of developers will tell you, they prefer building &amp;ldquo;a new thing&amp;rdquo;, rather than maintaining existing &amp;ldquo;legacy&amp;rdquo; projects.&lt;/p>
&lt;p>While working on &amp;ldquo;green field&amp;rdquo;, &amp;ldquo;day zero&amp;rdquo; projects can definitely be fun, they rarely feel &lt;em>real&lt;/em> to me. The &amp;ldquo;real&amp;rdquo; project lives in production. It has users. It has load. It demands improvement.&lt;/p>
&lt;p>You can&amp;rsquo;t improve &amp;ldquo;a new thing&amp;rdquo;.&lt;/p></description></item><item><title>Best practices</title><link>https://vladimir.varank.in/notes/2022/08/best-practices/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/08/best-practices/</guid><description>&lt;p>Before jumping on the &amp;ldquo;best practices of software engineering&amp;rdquo; train, after reading the classics, or someone&amp;rsquo;s re-post on social media, ask what was the context, in which these &amp;ldquo;best practices&amp;rdquo; were established. Some of those made sense in the environment, where the product&amp;rsquo;s release cycle has been measured with months. But that doesn&amp;rsquo;t mean they make sense, when we ship/fix/ship/new-requirements/ship/update/ship the product several times every week.&lt;/p></description></item><item><title>Bookmarks (issue 5)</title><link>https://vladimir.varank.in/notes/2022/07/bookmarks-5/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/07/bookmarks-5/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/user/devinebass">Scott&amp;rsquo;s Bass Lessons&lt;/a> and &lt;a href="https://www.youtube.com/c/BassBuzz">BassBuzz&lt;/a> on YouTube. I&amp;rsquo;m learning how to play bass guitar ðŸŽ¸ now. So far, these two channels were the most helpful with both the practice lessons, and the inspiration to move forward.&lt;/p>
&lt;p>&lt;a href="https://youtu.be/A_mstzRGfIE">Event-driven architecture done right&lt;/a> (Tim Berglung, Devoxx Poland 2021). Try to learn what you&amp;rsquo;re trying to do, before you elaborate the architecture, if uncertainty is very high, and you donâ€™t know exactly what businesses are asking. Just start with something (architecturally) simple.&lt;/p>
&lt;p>&lt;a href="https://www.usenix.org/system/files/atc22-vig.pdf">Amazon DynamoDB: A Scalable, Predictably Performant, and Fully Managed NoSQL Database Service&lt;/a> (whitepaper). &lt;a href="https://brooker.co.za/blog/2022/07/12/dynamodb.html">The analysis of the paper&lt;/a> (Marc Brooker).&lt;/p>
&lt;p>&lt;a href="https://www.acquired.fm/episodes/the-playbook-lessons-from-200-company-stories">Acquired&amp;rsquo;s lessons learned from 200 company stories&lt;/a>: optimism always wins (Sony); nothing can stop the will to survive (Nvidia); it&amp;rsquo;s never too late (TSMC); focus on what makes your beer taste better (Amazon and all utility companies); don&amp;rsquo;t be talent â€” own the business (Oprah, Tail Swift); youâ€™ll get the partners you ask for (Amazon&amp;rsquo;s &amp;ldquo;If youâ€™re not on my bus, get off&amp;rdquo;), and more.&lt;/p></description></item><item><title>Bookmarks (issue 4)</title><link>https://vladimir.varank.in/notes/2022/06/bookmarks-4/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/06/bookmarks-4/</guid><description>&lt;p>&lt;a href="https://tip.golang.org/doc/go1.19">Go 1.19beta1&lt;/a>. As usual, lots of good improvements in the language&amp;rsquo;s runtime and the compiler, with one particularly interesting addition being the new &amp;ldquo;knob&amp;rdquo; &lt;code>runtime/debug.SetMemoryLimit&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://www.grammarly.com/blog/gender-neutral-language/">How to use gender-neutral language at work and in life&lt;/a> (Grammarly). &amp;ldquo;Luckily, the English language is relatively gender-neutral in many respects&amp;rdquo; [at least, when compared to Russian and German languages].&lt;/p>
&lt;p>&lt;a href="https://developer.apple.com/videos/play/wwdc2022/10092">Meet passkeys&lt;/a> (Apple) and &lt;a href="https://www.youtube.com/watch?v=mjHIt9lDBgA">Everything you want to know about WebAuthn&lt;/a> (OktaDev). As you can guess, I&amp;rsquo;m very excited with Apple stepping onto the path to a passwordless future, while betting on WebAuthn standard.&lt;/p>
&lt;p>&lt;a href="https://developer.apple.com/videos/play/wwdc2022/10077/">Replace CAPTCHAs with Private Access Tokens&lt;/a> (Apple),
&lt;a href="https://www.fastly.com/blog/private-access-tokens-stepping-into-the-privacy-respecting-captcha-less">Private Access Tokens: stepping into the privacy-respecting, CAPTCHA-less future we were promised&lt;/a> (Fastly),
&lt;a href="https://blog.cloudflare.com/eliminating-captchas-on-iphones-and-macs-using-new-standard/">Private Access Tokens: eliminating CAPTCHAs on iPhones and Macs with open standards&lt;/a> (Cloudflare).&lt;/p></description></item><item><title>Bookmarks (issue 2)</title><link>https://vladimir.varank.in/notes/2022/04/bookmarks-2/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/04/bookmarks-2/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Digital_object_identifier">Digital object identifier (DOI)&lt;/a> (Wikipedia). A DOI is a persistent identifier or handle used to identify various objects uniquely. It aims to be &amp;ldquo;resolvable&amp;rdquo;, usually to some form of access to the information object to which the DOI refers. This is achieved by binding the DOI to metadata about the object, such as a URL. Thus, by being actionable and interoperable, a DOI differs from identifiers such as ISBNs, which aim only to identify their referents uniquely.&lt;/p>
&lt;p>&lt;a href="https://principledgraphql.com/operations">Operations principles: securely deploying the graph to production at scale&lt;/a> (Principled GraphQL). Lots of things listed there apply to any sort of APIs â€” not only to GraphQL.&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=Dvb7ooaFJaU">Songs your English teacher will NEVER teach!&lt;/a> (Learn English with Papa Teach Me). Vocabulary from &amp;ldquo;Savage&amp;rdquo;, &amp;ldquo;WAP&amp;rdquo;, and &amp;ldquo;34+35&amp;rdquo;. This video is &lt;em>definitely&lt;/em> not for kids!&lt;/p>
&lt;p>&lt;a href="https://www.grammarly.com/blog/phrases-spring-clean/">8 phrases to spring-clean from your emails&lt;/a> (Grammarly).&lt;/p>
&lt;p>&lt;a href="https://www.acquired.fm/episodes/platforms-and-power-with-hamilton-helmer-and-chenyi-shi">Platforms and Power&lt;/a> (Acquired). &amp;ldquo;7 Powers&amp;rdquo; author Hamilton Helmer and Chenyi Shi (Strategy Capital), joined Acquired Podcast to discuss platform businesses, and how the &amp;ldquo;Power&amp;rdquo; framework applies to them.&lt;/p>
&lt;p>&lt;a href="https://medium.com/@matryer/halfthings-a8c72365617c">Halfthings&lt;/a> (&lt;a href="https://twitter.com/matryer/">Mat Ryer&lt;/a>).
Building something for the users to play with, to touch, to feel, to break, makes all the difference and moves the conversations away from the meta.
Doing &amp;ldquo;one thing&amp;rdquo; or &amp;ldquo;building an MVP&amp;rdquo; can easily pull you into a &amp;ldquo;too much&amp;rdquo; for a validation phase. Build a &amp;ldquo;&lt;em>halfthing&lt;/em>&amp;rdquo; instead.&lt;/p></description></item><item><title>Love. Hate. Material Design</title><link>https://vladimir.varank.in/notes/2022/02/love-hate-material/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/02/love-hate-material/</guid><description>&lt;p>If Chrome had a notch&lt;/p>
&lt;figure>&lt;img src="https://vladimir.varank.in/images/2022/material-chrome-cut-1x.jpg"
 alt="Chrome notch" width="1000">
&lt;/figure></description></item><item><title>Development environment in 2020</title><link>https://vladimir.varank.in/notes/2021/04/development-environment-in-2020/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2021/04/development-environment-in-2020/</guid><description>&lt;figure>&lt;img src="https://vladimir.varank.in/images/2021/state-of-dev-2020-1.png"
 alt="Development environment in 2020" width="600">
&lt;/figure>

&lt;p>&lt;em>Last year I made this one, after involving myself into &lt;a href="https://twitter.com/tvii/status/1343243854183604226">a very random discussion on Twitter&lt;/a>, about the unnecessary complexity and none-sense of modern days&amp;rsquo; development environments.&lt;/em>&lt;/p></description></item><item><title>On code-reviews</title><link>https://vladimir.varank.in/notes/2020/12/on-code-reviews/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2020/12/on-code-reviews/</guid><description>&lt;p>&lt;em>This is another thought experiment, this time on the importance of my feedback in the code-reviews.&lt;/em>&lt;/p>
&lt;p>Providing youâ€™re working on a project maintained by a set team of N people. What would happen with the codebase if, for six months, in code-reviews, you started to accept changes for which, you generally leave feedback?&lt;/p>
&lt;p>&amp;ldquo;Variables, struct or function names are named poorly&amp;rdquo; â€” accept. &amp;ldquo;We already have a package, that solves a similar problem&amp;rdquo; â€” accept. &amp;ldquo;A change brings inconsistency to the codebase&amp;rdquo; â€” accept. &amp;ldquo;The pattern doesnâ€™t belong here&amp;rdquo; â€” accept.&lt;/p>
&lt;p>Go is a famously opinionated programming language. But does being opinionated help and scale outside of the language and its standard library?&lt;/p>
&lt;p>&lt;em>Do you have the answer? Discuss this note on &lt;a href="https://www.reddit.com/r/golang/comments/k7aqxw/a_thought_experiment_on_importance_of_your/">r/golang Reddit&lt;/a> or share your thoughts on &lt;a href="https://twitter.com/tvii/status/1335303528064094210">Twitter&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>A thought experiment on Apple M1</title><link>https://vladimir.varank.in/notes/2020/11/a-thought-experiment-on-apple-m1/</link><pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2020/11/a-thought-experiment-on-apple-m1/</guid><description>&lt;p>With Apple&amp;rsquo;s new M1 Macs showing (&lt;em>reportedly&lt;/em>) huge performance improvement, compared to &amp;ldquo;old&amp;rdquo;, Intel-based Macs, I wonder what would hold Qualcomm (Snapdragon CPU) and others from doing &amp;ldquo;the same&amp;rdquo; and moving into laptop/desktop territory?&lt;/p>
&lt;p>Microsoft already has Surface Pro X â€” an ARM-based Windows computer. They also have a version of Win10 for ARM, that one can even run on Raspberry Pi (still beta quality, I believe). Could 2021 become the year of ARM on desktop?&lt;/p>
&lt;p>Even more interesting, Amazon&amp;rsquo;s Graviton is showing (&lt;em>again, reportedly&lt;/em>) an excellent performance, while staying at reasonably low cost. What would stop Google/Microsoft from moving into ARM-based CPU territory for their clouds?&lt;/p></description></item><item><title>How to design a good API</title><link>https://vladimir.varank.in/notes/2020/08/how-to-design-a-good-api/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2020/08/how-to-design-a-good-api/</guid><description>&lt;p>A good API is designed around the use-case. A poorly designed, around the API&amp;rsquo;s implementation details.&lt;/p></description></item><item><title>Sticky headers? Please don't</title><link>https://vladimir.varank.in/notes/2020/06/sticky-headers/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2020/06/sticky-headers/</guid><description>&lt;p>Sticky (or &amp;ldquo;&lt;em>fixed&lt;/em>&amp;rdquo;) headers are everywhere. It feels that, nowadays, every web designerâ€™s first attempt to site&amp;rsquo;s navigation starts with a sticky header. I hate this.&lt;/p></description></item></channel></rss>