<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/kubernetes/</link><description>Recent content in kubernetes on Vladimir Varankin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 01 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Env variables, you will (likely) find set in my Kubernetes deployments</title><link>https://vladimir.varank.in/notes/2023/05/env-variables-you-will-likely-find-set-in-my-kubernetes-deployments/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2023/05/env-variables-you-will-likely-find-set-in-my-kubernetes-deployments/</guid><description>&lt;p>Kubernetes allows us to pass the values declared in a Pod&amp;rsquo;s manifest, to its containers via environment variables (&lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/">docs&lt;/a>). A typical situation, where I find this handy is when I run a Go application in a Pod.&lt;/p>
&lt;p>As discussed in the previous note, out of the box, &lt;a href="https://vladimir.varank.in/notes/2023/01/go-runtime-vs-cfs-quota/">Go runtime isn&amp;rsquo;t aware if it runs inside a container&lt;/a>. This can lead to confusing situations, when the runtime adjusts its behaviour, after observing the resources (CPU and memory) available on the cluster&amp;rsquo;s node, instead of the resources, a developer or an operator restricted the deployment with.&lt;/p></description></item><item><title>Go runtime vs CFS quota</title><link>https://vladimir.varank.in/notes/2023/01/go-runtime-vs-cfs-quota/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2023/01/go-runtime-vs-cfs-quota/</guid><description>&lt;p>As of today, the Go runtime isn&amp;rsquo;t aware if it runs inside a container under the resource constraints (CPU or memory). The runtime sees the resources available for the container&amp;rsquo;s underlying host OS, e.g. the VM where the container runs, and tries to optimize its behaviour base on what it sees. For container runtimes on Linux, which implements the CPU restrictions via CFS (&amp;ldquo;Completely Fair Scheduler&amp;rdquo;), a mismatch in what the application thinks is has, and what the OS allows to use, can lead to the poor performance of the application after the unexpected throttling.&lt;/p>
&lt;p>For example, a Go application, that runs in a container, constrained with 0.5 CPU, running on a host with 2 CPU, will observe 2 available CPU cores. That is the application&amp;rsquo;s calls to &lt;a href="https://pkg.go.dev/runtime#NumCPU">&lt;code>runtime.NumCPU()&lt;/code>&lt;/a> and &lt;a href="https://pkg.go.dev/runtime#GOMAXPROCS">&lt;code>runtime.GOMAXPROCS()&lt;/code>&lt;/a> will get us &amp;ldquo;2&amp;rdquo;. Because the Go runtime is optimized for the maximum utilization of the available compute under the concurrent workload, the goroutines it spawns are distributed to the internal thread pool, created with the assumption of two available CPU cores. This causes the application to throttle after the sum of the time it spend on the CPU cores per CFS period become equals to the quota of the container. With &lt;a href="https://www.kernel.org/doc/html/latest/scheduler/sched-bwc.html#management">the default CFS period&lt;/a> 100ms, the CFS quota of this container 0.5 CPU, and two threads running on different CPU cores, the application is throttled after 25ms every 100ms.&lt;/p></description></item><item><title>Bookmarks (issue 10)</title><link>https://vladimir.varank.in/notes/2022/12/bookmarks-10/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/12/bookmarks-10/</guid><description>The 22 BEST Basslines of 2022 (Patrick Hunter).
Building a custom code search index in Go for searchcodecom (Ben Boyter).
Kubernetes resources under the hood. This year was rich for deep tech articles and talks, that explain how CPU requests and limits work in Kubernetes. This three-part series is no exception.
John Carmack on resigning from Meta. A post that spawned many intresting opinions on the internet: &amp;ldquo;You can&amp;rsquo;t have top people in X (performance, security, whatever) work for you and only half-care about X at the same time. They will move&amp;rdquo;.</description></item><item><title>Bookmarks (issue 9)</title><link>https://vladimir.varank.in/notes/2022/11/bookmarks-9/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/11/bookmarks-9/</guid><description>Kubernetes removals, deprecations, and major changes in 1.26.
Performance evaluation of autoscaling strategies in Kubernetes (Kewyn Akshlley). tl;dr; After comparing the performance of horizontal and vertical autoscaling using synthetic load, the horizontal autoscaling seems more efficient, reacts faster to the load variation, and results in a lower impact on the application&amp;rsquo;s response time.
How Pinterest delivers software at scale (Go Time, podcast). A very refreshing discussion about real-world technical challenges large organizations face.
Adam Dymitruk on Event Modeling (Software Engineering Radio, podcast). Event Modeling: what is it?</description></item><item><title>Bookmarks (issue 6)</title><link>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</guid><description>Kubernetes antipatterns: CPU Limits. Always define CPU requests; never define CPU limits.
Explaining the unexplainable: buffers in PostgreSQL. Shared buffers are those, which&amp;rsquo;re&amp;rsquo; &amp;ldquo;shared&amp;rdquo; between several DB sessions, i.e. data pages, indices, etc; local buffers, are &amp;ldquo;local&amp;rdquo; to a session, i.e. for temporal tables; temp buffers are for intermediate objects, i.e. when the DBMS does hashing and sorting.
Rust Iterator pattern with iter(), into_iter() and iter_mut() methods.
Standard iterator interface in Go (Ian Lance Taylor via GitHub Discussions).</description></item><item><title>Bookmarks (issue 1)</title><link>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</guid><description>Generics can make your Go code slower (PlanetScale):
boxing vs monomorphization vs partial monomorphization (&amp;ldquo;GCShape stenciling with Dictionaries&amp;rdquo;) interface inlining doesn&amp;rsquo;t work well with the 1.18&amp;rsquo;s compiler generics work well for byte sequences (string | []byte) in simple cases, generics can be useful for function callbacks. How Meta enables de-identified authentication at scale. The rational, the use-cases, and a high-level architecture of Meta&amp;rsquo;s Anonymous Credential Service (ACS).
Hidden dangers of duplicate key violations in PostgreSQL (AWS). INSERT â€¦ ON CONFLICT has additional benefits, if compared to relying on PostgreSQL&amp;rsquo;s &amp;ldquo;duplicate key violation&amp;rdquo; error:
no additional space needed for dead tuples less autovacuum required transaction IDs aren&amp;rsquo;t used for nothing, preventing (postponing) the potential trx-id wraparound. Diving into AWS IAM Roles for (Kubernetes) Service Accounts (IRSA).</description></item><item><title>Making sense of requests for CPU resources in Kubernetes</title><link>https://vladimir.varank.in/notes/2021/09/making-sense-of-requests-for-cpu-resources-in-kubernetes/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2021/09/making-sense-of-requests-for-cpu-resources-in-kubernetes/</guid><description>&lt;p>Kubernetes allows a container to request several resource types:&lt;/p>
&lt;pre tabindex="0">&lt;code>apiVersion: v1
kind: Pod
metadata:
name: my-app
spec:
containers:
- name: my-app
image: images.example/my-app
resources:
requests:
cpu: &amp;#34;100m&amp;#34;
memory: &amp;#34;64Mi&amp;#34;
limits:
cpu: &amp;#34;500m&amp;#34;
memory: &amp;#34;128Mi&amp;#34;
&lt;/code>&lt;/pre>&lt;p>One particularly confusing type of the resource for me was &lt;code>cpu&lt;/code>. For example, in the manifest above, the &lt;code>my-app&lt;/code> container declares a request for &amp;ldquo;100m&amp;rdquo; of the CPU. What does that mean?&lt;/p></description></item><item><title>k3s with Ubuntu Server (arm64) on Raspberry Pi 4</title><link>https://vladimir.varank.in/notes/2020/01/raspi-ubuntu-arm64-k3s/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2020/01/raspi-ubuntu-arm64-k3s/</guid><description>&lt;p>As I&amp;rsquo;ve &lt;a href="https://twitter.com/tvii/status/1215927299557797893?s=20">twitted&lt;/a> recently, I&amp;rsquo;m updating one of my Raspberry Pis to &lt;a href="https://ubuntu.com/download/raspberry-pi">Ubuntu Server 19.10 (arm64)&lt;/a>.&lt;/p>
&lt;h2 id="one-of-raspberry-pis">&amp;ldquo;One of Raspberry Pis&amp;rdquo;?&lt;/h2>
&lt;p>My home cluster is four &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/?variant=raspberry-pi-4-model-b-2gb">Raspberry Pis 4 (2GB)&lt;/a>; all connected to my internet router through ethernet and
powered with &lt;a href="https://www.amazon.de/gp/product/B00PTLSH9G/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&amp;amp;psc=1">60W 6 USB-ports charger&lt;/a>. All Pis build a small Kubernetes cluster that runs with &lt;a href="https://k3s.io/">k3s&lt;/a>.&lt;/p>
&lt;p>All by one Pis run on &lt;a href="https://www.raspberrypi.org/downloads/raspbian/">Raspbian Buster Lite&lt;/a> and this setup&amp;rsquo;s been working pretty well until I&amp;rsquo;ve found out,
&lt;a href="https://www.aerospike.com/">Aerospike&lt;/a>, a database I required to run for a testing lab, only works on a 64-bit OS.&lt;/p>
&lt;p>Luckily, &lt;a href="https://ubuntu.com/download/raspberry-pi">Ubuntu Server has an arm64 version&lt;/a> built for Raspberry Pi. Thus, my working plan is to switch one Pi
to Ubuntu, compile and run a single-instance Aerospike server (&lt;em>and any other components, that require a 64-bit OS&lt;/em>) on this Pi, and provide a Kubernetes service in front of the DB, so other components in the cluster could access it as if it was
fully managed by Kubernetes.&lt;/p></description></item></channel></rss>