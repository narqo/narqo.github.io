<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aws on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/aws/</link><description>Recent content in Aws on Vladimir Varankin</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 30 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Bookmarks (issue 7)</title><link>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</guid><description>&lt;p>&lt;a href="https://www.acquired.fm/episodes/amazon-com">The complete history and strategy of Amazon.com&lt;/a> and &lt;a href="https://www.acquired.fm/episodes/amazon-web-services">The complete history and strategy of AWS&lt;/a> (Acquired podcast).
In the world, where the growth of storages is massively outpacing the improvements in the speed of the Internet, a database is the most sticky technology. That&amp;rsquo;s how AWS locks the enterprises in: it’s impossible to migrate the enterprise-grade of data out of AWS (&amp;ldquo;It took thirty years for Amazon to migrate off Oracle to AWS&amp;rdquo;).&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjaKScG3l0nuOiDTTqpfnWFf">CMU Intro to Database systems / Fall 2022&lt;/a> (Carnegie Mellon University); &lt;a href="https://www.qwertee.io/blog/postgresql-b-tree-index-explained-part-1/">PostgreSQL B-Tree index explained, pt. 1&lt;/a> (Qwertee).&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/blogs/database/build-a-cqrs-event-store-with-amazon-dynamodb/">Build a CQRS event store with Amazon DynamoDB&lt;/a> (AWS).&lt;/p></description></item><item><title>Bookmarks (issue 1)</title><link>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</guid><description>&lt;p>&lt;a href="https://planetscale.com/blog/generics-can-make-your-go-code-slower">Generics can make your Go code slower&lt;/a> (PlanetScale):&lt;/p>
&lt;ol>
&lt;li>boxing vs monomorphization vs partial monomorphization (&amp;ldquo;GCShape stenciling with Dictionaries&amp;rdquo;)&lt;/li>
&lt;li>interface inlining doesn&amp;rsquo;t work well with the 1.18&amp;rsquo;s compiler&lt;/li>
&lt;li>generics work well for byte sequences (&lt;code>string | []byte&lt;/code>)&lt;/li>
&lt;li>in simple cases, generics can be useful for function callbacks.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://engineering.fb.com/2022/03/30/security/de-identified-authentication-at-scale/">How Meta enables de-identified authentication at scale&lt;/a>. The rational, the use-cases, and a high-level architecture of Meta&amp;rsquo;s Anonymous Credential Service (ACS).&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/blogs/database/hidden-dangers-of-duplicate-key-violations-in-postgresql-and-how-to-avoid-them/">Hidden dangers of duplicate key violations in PostgreSQL&lt;/a> (AWS). &lt;code>INSERT … ON CONFLICT&lt;/code> has additional benefits, if compared to relying on PostgreSQL&amp;rsquo;s &amp;ldquo;duplicate key violation&amp;rdquo; error:&lt;/p>
&lt;ol>
&lt;li>no additional space needed for dead tuples&lt;/li>
&lt;li>less autovacuum required&lt;/li>
&lt;li>transaction IDs aren&amp;rsquo;t used for nothing, preventing (postponing) the potential trx-id wraparound.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://aws.amazon.com/blogs/containers/diving-into-iam-roles-for-service-accounts/">Diving into AWS IAM Roles for (Kubernetes) Service Accounts (IRSA)&lt;/a>.&lt;/p></description></item></channel></rss>