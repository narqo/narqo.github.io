<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>e-paper on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/e-paper/</link><description>Recent content in e-paper on Vladimir Varankin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/e-paper/index.xml" rel="self" type="application/rss+xml"/><item><title>Waveshare ESP8266 Driver Board Pins Mapping</title><link>https://vladimir.varank.in/notes/2020/07/waveshare-esp8266-driver-board-pins-mapping/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2020/07/waveshare-esp8266-driver-board-pins-mapping/</guid><description>I&amp;rsquo;ve been playing with an e-paper ESP866 Driver Board, and a 2.7&amp;quot; E-Ink display from Waveshare. Arduino C++ looks manageable. One strange thing, though. In both board’s documentation and GxEPD2 library’s examples, they say the display is connected to pins as BUSY → GPIO16, RST → GPIO5, DC → GPIO4, CS → GPIO15. This mapping seems wrong.
After digging through the code examples from Waveshare’s Wiki, the correct mapping is the following:
BUSY → GPIO5, RST → GPIO2, DC → GPIO4, CS → GPIO15
That&amp;rsquo;s how the initialisation of the main GxEPD2 class for my 2.7&amp;quot; display looks like now:
#define ENABLE_GxEPD2_GFX 0 #include &amp;lt;GxEPD2_BW.h&amp;gt; // mapping of Waveshare e-Paper ESP8266 Driver Board GxEPD2_BW&amp;lt;GxEPD2_270, GxEPD2_270::HEIGHT&amp;gt; display(GxEPD2_270(/*CS=15*/ SS, /*DC=4*/ 4, /*RST=2*/ 2, /*BUSY=5*/ 5));</description></item></channel></rss>