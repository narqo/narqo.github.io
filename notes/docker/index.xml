<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/docker/</link><description>Recent content in Docker on Vladimir Varankin</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 26 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Making sense of requests for CPU resources in Kubernetes</title><link>https://vladimir.varank.in/notes/2021/09/making-sense-of-requests-for-cpu-resources-in-kubernetes/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2021/09/making-sense-of-requests-for-cpu-resources-in-kubernetes/</guid><description>&lt;p>Kubernetes allows a container to request several resource types:&lt;/p>
&lt;pre tabindex="0">&lt;code>apiVersion: v1
kind: Pod
metadata:
 name: my-app
spec:
 containers:
 - name: my-app
 image: images.example/my-app
 resources:
 requests:
 cpu: &amp;#34;100m&amp;#34;
 memory: &amp;#34;64Mi&amp;#34;
 limits:
 cpu: &amp;#34;500m&amp;#34;
 memory: &amp;#34;128Mi&amp;#34;
&lt;/code>&lt;/pre>&lt;p>One particularly confusing type of the resource for me was &lt;code>cpu&lt;/code>. For example, in the manifest above, the &lt;code>my-app&lt;/code> container declares a request for &amp;ldquo;100m&amp;rdquo; of the CPU. What does that mean?&lt;/p></description></item><item><title>Building Multi-Platform Docker Images with Travis CI and BuildKit</title><link>https://vladimir.varank.in/notes/2020/01/buildkit-multi-platform-travis-ci/</link><pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2020/01/buildkit-multi-platform-travis-ci/</guid><description>&lt;p>&lt;em>This is a lengthy note. If you don&amp;rsquo;t quite feel reading and only need the working example, go directly to &lt;a href="https://github.com/profefe/profefe/blob/09ff03be6561a7ef88fba7b96d923abd6a413931/.travis.yml">the Travis CI build file&lt;/a>.&lt;/em>&lt;/p>
&lt;p>The more I delve into the world of Raspberry Pi, the more I notice that &amp;ldquo;regular and boring&amp;rdquo; things on ARM are harder than I expected.&lt;/p>
&lt;p>People build and distribute software exclusively for amd64. You read another &amp;ldquo;&lt;em>Kubernetes something&lt;/em>&amp;rdquo; tutorial, that went viral on Twitter, and is fancy to try it out. Still, all helm charts, or whatever the author prefered, use Docker images built exclusively for amd64.&lt;/p>
&lt;p>Docker toolchain has added the support for building multi-platform images in 19.x. However, it&amp;rsquo;s available only under the &amp;ldquo;experimental&amp;rdquo; mode. The topic of building multi-platform Docker images yet feels underrepresented.&lt;/p>
&lt;h2 id="but-first-what-are-multi-platform-docker-images">But first, what are multi-platform Docker images?&lt;/h2>
&lt;p>When a client, e.g. Docker client, tries to pull an image, it must negotiate the details about what exactly to pull with the registry. The registry provides a manifest that describes the digest of the requested image, the volumes the image consists of, the platform this image can run on, etc. Optionally, the registry can provide a manifests list, which, as the name suggests, is a list of several manifests bundled into one. With the manifests list in hands, the client can figure out the particular digest of the image it needs to pull.&lt;/p>
&lt;p>So multi-platform Docker images are just several images, whose manifests are bundled into the manifests list.&lt;/p>
&lt;p>Imagine we want to pull the image &lt;a href="https://hub.docker.com/_/golang">&lt;code>golang:1.13.6-alpine3.10&lt;/code>&lt;/a>. Docker client will get the manifests list from Dockerhub. This list includes digests of several images, each built for the particular platform. If we&amp;rsquo;re on Raspberry Pi, running the current Raspbian Linux, which is &lt;code>arm/v7&lt;/code>, the client will pick the corresponding image&amp;rsquo;s digest. Alternatively, we could choose to pull the image &lt;a href="https://hub.docker.com/r/arm32v7/golang/">&lt;code>arm32v7/golang:1.13.6-alpine3.10&lt;/code>&lt;/a> instead, and we ended up with the same image with the &lt;a href="https://hub.docker.com/layers/arm32v7/golang/alpine3.10/images/sha256-d72fa60fb5b9ffc12db9c87340bc9d9f55852570f1efc7d7656f081749a7f0aa">digest &lt;code>d72fa60fb5b9&lt;/code>&lt;/a>. Of course, to use a single universal image name, i.e. &lt;code>golang&lt;/code>, on every platform is way more convenient.&lt;/p>
&lt;p>You can read more about manifests &lt;a href="https://docs.docker.com/registry/spec/manifest-v2-2/">in Docker registry documentation&lt;/a>.&lt;/p>
&lt;h2 id="does-it-mean-i-need-to-build-different-docker-images-for-each-platform-i-want-to-support">Does it mean I need to build different Docker images, for each platform I want to support?&lt;/h2>
&lt;p>Well, yes. This is how, official images are built.&lt;/p>
&lt;p>For every platform, the image is built and pushed to the registry under the name &lt;code>&amp;lt;platform&amp;gt;/&amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code>, e.g. &lt;a href="https://hub.docker.com/r/amd64/golang/">&lt;code>amd64/golang:1-alpine&lt;/code>&lt;/a>. And next, a manifests list, that combines all those platform-specific images, is built and pushed with the simple name &lt;code>&amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://github.com/moby/buildkit">Docker&amp;rsquo;s BuildKit&lt;/a> provides a toolkit that, among other nice things, allows building multi-platform images on a single host. BuildKit is used inside &lt;a href="https://github.com/docker/buildx">Docker&amp;rsquo; buildx project&lt;/a>, that is part of the recent Docker version.&lt;/p>
&lt;p>One can use buildx, but, for this post, I wanted to try out, what would it look like to use BuildKit directly. For &lt;a href="https://github.com/profefe/profefe">profefe&lt;/a>, the system for continuous profiling of Go services, I set up &lt;a href="https://travis-ci.com/">Travis CI&lt;/a>, that builds a multi-platform Docker image and pushes them to Dockerhub.&lt;/p>
&lt;p>profefe is written in Go. That simplifies things, because, thanks to Go compiler, I don&amp;rsquo;t have to think about how to compile code for different platforms. &lt;a href="https://github.com/profefe/profefe/blob/09ff03be6561a7ef88fba7b96d923abd6a413931/contrib/docker/Dockerfile">The same Dockerfile&lt;/a> will work fine on every platform.&lt;/p>
&lt;p>Here&amp;rsquo;s how &amp;ldquo;deploy&amp;rdquo; stage of the build job looks like (&lt;a href="https://github.com/profefe/profefe/blob/09ff03be6561a7ef88fba7b96d923abd6a413931/.travis.yml">see &lt;code>travis.yml&lt;/code> on profefe&amp;rsquo;s GitHub&lt;/a>).&lt;/p>
&lt;pre tabindex="0">&lt;code>dist: bionic

language: go
go:
 - 1.x

jobs:
 include:
 - stage: deploy docker
 services: docker
 env:
 - PLATFORMS=&amp;#34;linux/amd64,linux/arm64,linux/arm/v7&amp;#34;
 install:
 - docker container run --rm --privileged multiarch/qemu-user-static --reset -p yes
 - docker container run -d --rm --name buildkitd --privileged moby/buildkit:latest
 - sudo docker container cp buildkitd:/usr/bin/buildctl /usr/local/bin/
 - export BUILDKIT_HOST=&amp;#34;docker-container://buildkitd&amp;#34;
 script: skip
 deploy:
 - provider: script
 script: |
 buildctl build \
 --progress=plain \
 --frontend=dockerfile.v0 \
 --local context=. --local dockerfile=. \
 --opt filename=contrib/docker/Dockerfile \
 --opt platform=$PLATFORMS \
 --opt build-arg:VERSION=\&amp;#34;master\&amp;#34; \
 --opt build-arg:GITSHA=\&amp;#34;$TRAVIS_COMMIT\&amp;#34; \
 --output type=image,\&amp;#34;name=profefe/profefe:git-master\&amp;#34;,push=true
 on:
 repo: profefe/profefe
 branch: master
 before_deploy:
 - echo &amp;#34;$DOCKER_PASSWORD&amp;#34; | docker login --username &amp;#34;$DOCKER_USERNAME&amp;#34; --password-stdin
 after_failure:
 - buildctl debug workers ls
 - docker container logs buildkitd
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s a lot happening here, but I&amp;rsquo;ll describe the most critical parts.&lt;/p>
&lt;p>Let&amp;rsquo;s start with &lt;code>dist: bionic&lt;/code>.&lt;/p>
&lt;p>We run the builds under Ubuntu 18.04 (Bionic Beaver). To be able to build multi-platform images on a single amd64 host, BuildKit uses QEMU to emulate other platforms. That requires Linux kernel 4.8, so even Ubuntu 16.04 (Xenial Xerus) should work.&lt;/p>
&lt;p>The top-level details on how the emulation works are very well described in &lt;a href="https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html">https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html&lt;/a>&lt;/p>
&lt;p>In short, we tell the component of the kernel (&lt;code>binfmt_misc&lt;/code>) to use QEMU when the system executes a binaries built for a different platform. The following call in the &amp;ldquo;install&amp;rdquo; step is what&amp;rsquo;s doing that:&lt;/p>
&lt;pre tabindex="0">&lt;code>- docker container run --rm --privileged multiarch/qemu-user-static --reset -p yes
&lt;/code>&lt;/pre>&lt;p>Under the hood, the container runs a &lt;a href="https://raw.githubusercontent.com/qemu/qemu/master/scripts/qemu-binfmt-conf.sh">shell script from QEMU project&lt;/a>, that registers the emulator as an executor of binaries from the external platforms.&lt;/p>
&lt;blockquote>
&lt;p>If you think, that running a docker container to do the manipulations with the host&amp;rsquo;s OS looks weird, well&amp;hellip; I can&amp;rsquo;t agree more. Probably, a better approach would be to install &lt;a href="https://packages.ubuntu.com/bionic/qemu-user-static">qemu-user-static&lt;/a>, which would do the proper setup. Unfortunately, the current package&amp;rsquo;s version for Ubuntu Bionic doesn&amp;rsquo;t do the registration as we need it. I.e. its post-install doesn&amp;rsquo;t add the &lt;code>&amp;quot;F&amp;quot;&lt;/code> flag (&amp;ldquo;fix binaries&amp;rdquo;), which is crucial for our goal. Let&amp;rsquo;s just agree,that docker-run will do ok for the demonstrational purpose.&lt;/p>&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>- docker container run -d --rm --name buildkitd --privileged moby/buildkit:latest
- sudo docker container cp buildkitd:/usr/bin/buildctl /usr/local/bin/
- export BUILDKIT_HOST=&amp;#34;docker-container://buildkitd&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This is another &amp;ldquo;docker-run&amp;rsquo;ism&amp;rdquo;. We start BuildKit&amp;rsquo;s &lt;code>buildkitd&lt;/code> daemon inside the container, attaching it to the Docker daemon that runs on the host (&amp;ldquo;privileged&amp;rdquo; mode). Next, we copy &lt;code>buildctl&lt;/code> binary from the container to the host system and set &lt;code>BUILDKIT_HOST&lt;/code> environment variable, so &lt;code>buildctl&lt;/code> knew where its daemon runs.&lt;/p>
&lt;blockquote>
&lt;p>Alternatively, we could install BuildKit from GitHub and run the daemon directly on the build host. YOLO.&lt;/p>&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>before_deploy:
 - echo &amp;#34;$DOCKER_PASSWORD&amp;#34; | docker login --username &amp;#34;$DOCKER_USERNAME&amp;#34; --password-stdin
&lt;/code>&lt;/pre>&lt;p>To be able to push the images to the registry, we need to log in providing Docker credentials to host&amp;rsquo;s Docker daemon. The credentials are set as Travis CI&amp;rsquo;s encrypted environment variables ([refer to Travis CI docs])](&lt;a href="https://docs.travis-ci.com/user/environment-variables/))">https://docs.travis-ci.com/user/environment-variables/))&lt;/a>.&lt;/p>
&lt;pre tabindex="0">&lt;code>buildctl build \
 --progress=plain \
 --frontend=dockerfile.v0 \
 --local context=. --local dockerfile=. \
 --opt filename=contrib/docker/Dockerfile \
 --opt platform=$PLATFORMS \
 --opt build-arg:VERSION=\&amp;#34;master\&amp;#34; \
 --opt build-arg:GITSHA=\&amp;#34;$TRAVIS_COMMIT\&amp;#34; \
 --output type=image,\&amp;#34;name=profefe/profefe:git-master\&amp;#34;,push=true
&lt;/code>&lt;/pre>&lt;p>This is the &lt;em>black box&lt;/em> where everything happens. Magically!&lt;/p>
&lt;p>We run &lt;code>buildctl&lt;/code> stating that it must use the specified Dockerfile; it must build the images for defined platforms (I specified &lt;code>linux/amd64,linux/arm64,linux/arm/v7&lt;/code>), create a manifests list tagged as the desired image (&lt;code>profefe/profefe:&amp;lt;version&amp;gt;&lt;/code>), and push all the images to the registry.&lt;/p>
&lt;p>&lt;code>buildctl debug workers ls&lt;/code> shows what platforms does BuildKit on this host support. I listed only those I&amp;rsquo;m currently intrested with.&lt;/p>
&lt;p>And that&amp;rsquo;s all. This setup automatically builds and pushes multi-platform Docker images for profefe (&lt;a href="https://hub.docker.com/p/profefe/profefe">https://hub.docker.com/p/profefe/profefe&lt;/a>) on a commit to project&amp;rsquo;s &amp;ldquo;master&amp;rdquo; branch on GitHub.&lt;/p>
&lt;hr>
&lt;p>As I hope you&amp;rsquo;ve seen, support for multi-platform is getting easier and things that were hard a year ago are only mildly annoying now :)&lt;/p>
&lt;p>If you have any comments or suggestions, reach out to me on &lt;a href="https://twitter.com/tvii/status/1221858810006065154">Twitter&lt;/a> or discuss this note on &lt;a href="https://www.reddit.com/r/docker/comments/eutrkg/building_multiplatform_docker_images_with_travis/">r/docker Reddit&lt;/a>.&lt;/p>
&lt;p>Some more reading on the topic:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/moby/buildkit">Documentation for BuildKit project&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/docker/buildx#building-multi-platform-images">Building multi-platform images with docker and buildx&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.docker.com/blog/docker-official-images-now-multi-platform/">Docker Official Images are now Multi-platform, Docker official announcement&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>