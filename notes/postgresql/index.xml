<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>postgresql on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/postgresql/</link><description>Recent content in postgresql on Vladimir Varankin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 31 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/postgresql/index.xml" rel="self" type="application/rss+xml"/><item><title>Bookmarks (issue 8)</title><link>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</guid><description>Taking Postgres serverless (Changelog). Neon: Serverless PostgreSQL (Heikki Linnakangas @ Carnegie Mellon University).
Simple simulations for system builders (Marc Brooker). System designers care about questions like &amp;ldquo;How will the system behave under overload?&amp;rdquo; or &amp;ldquo;How sensitive is the design to latency?&amp;rdquo;. By &amp;ldquo;writing small simulators that simulate the behaviour of simple models&amp;rdquo;, Marc shows an approach to explore and reason about the possible answers to such questions.
The HTTP crash course nobody asked for.
Design docs at Google. When not to write a design doc: A clear indicator that a doc might not be necessary is when a design doc is an implementation manual, that doesn&amp;rsquo;t go into trade-offs, alternatives, and explanation of the decision-making; — write the actual application instead.</description></item><item><title>Bookmarks (issue 7)</title><link>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</guid><description>The complete history and strategy of Amazon.com and The complete history and strategy of AWS (Acquired podcast). In the world, where the growth of storages is massively outpacing the improvements in the speed of the Internet, a database is the most sticky technology. That&amp;rsquo;s how AWS locks the enterprises in: it’s impossible to migrate the enterprise-grade of data out of AWS (&amp;ldquo;It took thirty years for Amazon to migrate off Oracle to AWS&amp;rdquo;).
CMU Intro to Database systems / Fall 2022 (Carnegie Mellon University); PostgreSQL B-Tree index explained, pt. 1 (Qwertee).
Build a CQRS event store with Amazon DynamoDB (AWS).</description></item><item><title>Bookmarks (issue 6)</title><link>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</guid><description>Kubernetes antipatterns: CPU Limits. Always define CPU requests; never define CPU limits.
Explaining the unexplainable: buffers in PostgreSQL. Shared buffers are those, which&amp;rsquo;re&amp;rsquo; &amp;ldquo;shared&amp;rdquo; between several DB sessions, i.e. data pages, indices, etc; local buffers, are &amp;ldquo;local&amp;rdquo; to a session, i.e. for temporal tables; temp buffers are for intermediate objects, i.e. when the DBMS does hashing and sorting.
Rust Iterator pattern with iter(), into_iter() and iter_mut() methods.
Standard iterator interface in Go (Ian Lance Taylor via GitHub Discussions).</description></item><item><title>Bookmarks (issue 3)</title><link>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</guid><description>Rust tracks on Exercism. More than 100 coding exercises to learn Rust through practice.
PostgreSQL Anonymizer 1.0. A PostgreSQL extension for declarative data masking (docs and examples).
Queries in PostgreSQL: 4. Index scan (Postgres Pro). An in-depth overview of how PostgreSQL decides if it will use an index. One particular thing I had no idea about before I read the article was that &amp;ldquo;The Index Scan cost is highly dependent on the correlation between the physical order of the tuples on disk and the order in which the access method returns the IDs&amp;rdquo;. That explains several cases from my own experience, where postgres kept using &amp;ldquo;unexpected&amp;rdquo; sequential scans, after we added &amp;ldquo;another index&amp;rdquo; to the database.
Monarch: Google’s planet-scale in-memory time series database (Micah Lerner). A review of the paper (PDF), which describes the latest iteration of Google&amp;rsquo;s in-house metrics system.
Google’s API Improvement Proposals (AIP). A collection of design documents that summarize Google&amp;rsquo;s API design decisions.</description></item><item><title>Bookmarks (issue 1)</title><link>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</guid><description>Generics can make your Go code slower (PlanetScale):
boxing vs monomorphization vs partial monomorphization (&amp;ldquo;GCShape stenciling with Dictionaries&amp;rdquo;) interface inlining doesn&amp;rsquo;t work well with the 1.18&amp;rsquo;s compiler generics work well for byte sequences (string | []byte) in simple cases, generics can be useful for function callbacks. How Meta enables de-identified authentication at scale. The rational, the use-cases, and a high-level architecture of Meta&amp;rsquo;s Anonymous Credential Service (ACS).
Hidden dangers of duplicate key violations in PostgreSQL (AWS). INSERT … ON CONFLICT has additional benefits, if compared to relying on PostgreSQL&amp;rsquo;s &amp;ldquo;duplicate key violation&amp;rdquo; error:
no additional space needed for dead tuples less autovacuum required transaction IDs aren&amp;rsquo;t used for nothing, preventing (postponing) the potential trx-id wraparound. Diving into AWS IAM Roles for (Kubernetes) Service Accounts (IRSA).</description></item><item><title>(You don't) Insert unicode NULL character as Postgres jsonb</title><link>https://vladimir.varank.in/notes/2021/01/you-dont-insert-unicode-null-character-as-postgres-jsonb/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2021/01/you-dont-insert-unicode-null-character-as-postgres-jsonb/</guid><description>With JSON data type it’s easy to treat Postgres as a document database, which doesn’t need strong schema. One can define a table, that has a field of a type jsonb and insert any valid JSON string (a “document”).
I’ve learned lately, that Postgres’s jsonb prohibits insertion of a valid JSON string if the string contains NULL (U+0000) character. Postgres’s own docs on JSON Types says:
RFC 7159 permits JSON strings to contain Unicode escape sequences denoted by \uXXXX. In the input function for the json type, Unicode escapes are allowed regardless of the database encoding, and are checked only for syntactic correctness. However, the input function for jsonb is stricter: it disallows Unicode escapes for non-ASCII characters (those above U+007F) unless the database encoding is UTF8. The jsonb type also rejects \u0000 (because that cannot be represented in PostgreSQL&amp;rsquo;s text type), and it insists that any use of Unicode surrogate pairs to designate characters outside the Unicode Basic Multilingual Plane be correct.
In my case, a Go backend inserts tracing logs to Postgres. A trace consists of multiple “spans”, some of which can contain the reply from an external API. As we found out, sometimes, in the event of a failure, the API replies with an empty GIF &amp;lt;facepalm/&amp;gt;. Our backend converts the response to a string, marshals it to a JSON and later tries to insert the JSON into a Postgres table.
Consider the following Go code:
// data is an empty GIF var data = []byte{ 0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x44, 0x00, 0x3b, } func main() { v, _ := json.Marshal(struct { Resp interface{} `json:&amp;#34;resp,omitempty&amp;#34;` }{ Resp: string(data), }) fmt.Printf(&amp;#34;%s\n&amp;#34;, v) // Output (truncated for readability): // {&amp;#34;resp&amp;#34;:&amp;#34;GIF89a\u0001\u0000\u0001\u0000\ufffd\···\u0001D\u0000;&amp;#34;} } Above, json.Marshal produces a perfectly valid JSON. But if I try to insert it into a Postgres table as jsonb, the insert fails with “unsupported Unicode escape sequence”:
= CREATE TABLE logs (data jsonb); = INSERT INTO logs VALUES (&amp;#39;{&amp;#34;resp&amp;#34;:&amp;#34;GIF89a\u0001\u0000\u0001\u0000\ufffd\···\u0001D\u0000;&amp;#34;}&amp;#39;); ERROR: unsupported Unicode escape sequence LINE 1: insert into logs values (&amp;#39;{&amp;#34;resp&amp;#34;:&amp;#34;GIF89a\u0001\u0000\u0001\... ^ DETAIL: \u0000 cannot be converted to text. CONTEXT: JSON data, line 1: {&amp;#34;resp&amp;#34;:... Because in my code, there were only a couple of places where I didn&amp;rsquo;t control the actual data, that went into a span, the way I’ve chosen to handle that was by introducing a wrapper type, that implements json.Marshaller. The wrapper checks the value is a valid UTF-8 sequence and doesn’t contain NULL character before it marshals the value into a JSON string. If the value is not a valid UTF-8, the marshaller sees it as a binary data and base64-encodes it.
// RawText handles invalid UTF-8 and NULL-bytes, encoding them as base64-string. // Because we have to make sure the resulting JSON will be compatible with Postgres&amp;#39;s jsonb, // we must use RawText when we don&amp;#39;t control the data, e.g. when log the error from an external API. // Refer to https://www.postgresql.org/docs/10/datatype-json.html type RawText []byte func (v RawText) MarshalEasyJSON(w *Writer) { if utf8.Valid(v) &amp;amp;&amp;amp; !bytes.ContainsRune(v, &amp;#39;\u0000&amp;#39;) { // &amp;#34;valid&amp;#34; text is marshalled as string w.String(string(v)) } else { // &amp;#34;invalid&amp;#34; text is marshalled as binary data w.Raw(json.Marshal([]byte(v))) } } Note, the code above is a marshaller for github.com/mailru/easyjson, which we use in the project.
Here is how it looks in practice:
func main() { v, _ := json.Marshal(struct { Resp1 interface{} `json:&amp;#34;resp1,omitempty&amp;#34;` Resp2 interface{} `json:&amp;#34;resp2,omitempty&amp;#34;` }{ Resp1: RawText(bin), // wrap the bin data into RawText Rest2: RawText(&amp;#34;normal string&amp;#34;), // wrap (copy) a string into RawText }) fmt.Printf(&amp;#34;%s\n&amp;#34;, v) // Output: // { // &amp;#34;resp1&amp;#34;:&amp;#34;R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7&amp;#34;, // &amp;#34;resp2&amp;#34;:&amp;#34;normal string&amp;#34; // } }</description></item></channel></rss>