<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/rust/</link><description>Recent content in Rust on Vladimir Varankin</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 31 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Bookmarks (issue 6)</title><link>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/watch?v=x9_9iaVszpM">Kubernetes antipatterns: CPU Limits&lt;/a>. Always define CPU requests; never define CPU limits.&lt;/p>
&lt;p>&lt;a href="https://www.depesz.com/2021/06/20/explaining-the-unexplainable-part-6-buffers/">Explaining the unexplainable: buffers in PostgreSQL&lt;/a>. Shared buffers are those, which&amp;rsquo;re&amp;rsquo; &amp;ldquo;shared&amp;rdquo; between several DB sessions, i.e. data pages, indices, etc; local buffers, are &amp;ldquo;local&amp;rdquo; to a session, i.e. for temporal tables; temp buffers are for intermediate objects, i.e. when the DBMS does hashing and sorting.&lt;/p>
&lt;p>&lt;a href="https://www.geekabyte.io/2022/08/rust-iterator-pattern-with-iter.html">Rust Iterator pattern with &lt;code>iter()&lt;/code>, &lt;code>into_iter()&lt;/code> and &lt;code>iter_mut()&lt;/code> methods&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://github.com/golang/go/discussions/54245">Standard iterator interface in Go&lt;/a> (Ian Lance Taylor via GitHub Discussions).&lt;/p></description></item><item><title>Bookmarks (issue 3)</title><link>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</guid><description>&lt;p>&lt;a href="https://exercism.org/tracks/rust">Rust tracks on Exercism&lt;/a>. More than 100 coding exercises to learn &lt;a href="https://www.rust-lang.org/">Rust&lt;/a> through practice.&lt;/p>
&lt;p>&lt;a href="https://www.postgresql.org/about/news/postgresql-anonymizer-10-privacy-by-design-for-postgres-2452/">PostgreSQL Anonymizer 1.0&lt;/a>. A PostgreSQL extension for declarative data masking (&lt;a href="https://postgresql-anonymizer.readthedocs.io/en/latest/">docs and examples&lt;/a>).&lt;/p>
&lt;p>&lt;a href="https://postgrespro.com/blog/pgsql/5969493">Queries in PostgreSQL: 4. Index scan&lt;/a> (Postgres Pro). An in-depth overview of how PostgreSQL decides if it will use an index.
One particular thing I had no idea about before I read the article was that &amp;ldquo;The Index Scan cost is highly dependent on the &lt;em>correlation&lt;/em> between the physical order of the tuples on disk and the order in which the access method returns the IDs&amp;rdquo;. That explains several cases from my own experience, where postgres kept using &amp;ldquo;unexpected&amp;rdquo; sequential scans, after we added &amp;ldquo;another index&amp;rdquo; to the database.&lt;/p>
&lt;p>&lt;a href="https://www.micahlerner.com/2022/04/24/monarch-googles-planet-scale-in-memory-time-series-database.html">Monarch: Google’s planet-scale in-memory time series database&lt;/a> (&lt;a href="https://twitter.com/micahlerner">Micah Lerner&lt;/a>). A review of the paper (&lt;a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/d84ab6c93881af998de877d0070a706de7bec6d8.pdf">PDF&lt;/a>), which describes the latest iteration of Google&amp;rsquo;s in-house metrics system.&lt;/p>
&lt;p>&lt;a href="https://google.aip.dev/">Google’s API Improvement Proposals (AIP)&lt;/a>. A collection of design documents that summarize Google&amp;rsquo;s API design decisions.&lt;/p></description></item></channel></rss>