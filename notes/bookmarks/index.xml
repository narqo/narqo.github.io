<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bookmarks on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/bookmarks/</link><description>Recent content in Bookmarks on Vladimir Varankin</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 31 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/bookmarks/index.xml" rel="self" type="application/rss+xml"/><item><title>Bookmarks (issue 10)</title><link>https://vladimir.varank.in/notes/2022/12/bookmarks-10/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/12/bookmarks-10/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/watch?v=ZZkMN6cbL-U">The 22 BEST Basslines of 2022&lt;/a> (Patrick Hunter).&lt;/p>
&lt;p>&lt;a href="https://boyter.org/posts/how-i-built-my-own-index-for-searchcode/">Building a custom code search index in Go for searchcodecom&lt;/a> (&lt;a href="https://twitter.com/boyter">Ben Boyter&lt;/a>).&lt;/p>
&lt;p>&lt;a href="https://medium.com/directeam/kubernetes-resources-under-the-hood-part-3-6ee7d6015965">Kubernetes resources under the hood&lt;/a>. This year was rich for deep tech articles and talks, that explain how CPU requests and limits work in Kubernetes. This three-part series is no exception.&lt;/p>
&lt;p>&lt;a href="https://twitter.com/ID_AA_Carmack/status/1603931899810004994">John Carmack on resigning from Meta&lt;/a>. A post that spawned many intresting opinions on the internet: &amp;ldquo;You can&amp;rsquo;t have top people in X (performance, security, whatever) work for you and only half-care about X at the same time. They will move&amp;rdquo;.&lt;/p></description></item><item><title>Bookmarks (issue 9)</title><link>https://vladimir.varank.in/notes/2022/11/bookmarks-9/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/11/bookmarks-9/</guid><description>&lt;p>&lt;a href="https://kubernetes.io/blog/2022/11/18/upcoming-changes-in-kubernetes-1-26/">Kubernetes removals, deprecations, and major changes in 1.26&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://medium.com/@kewynakshlley/performance-evaluation-of-the-autoscaling-strategies-vertical-and-horizontal-using-kubernetes-42d9a1663e6b">Performance evaluation of autoscaling strategies in Kubernetes&lt;/a> (&lt;a href="https://twitter.com/kewynakshlley">Kewyn Akshlley&lt;/a>). tl;dr; After comparing the performance of horizontal and vertical autoscaling using synthetic load, the horizontal autoscaling seems more efficient, reacts faster to the load variation, and results in a lower impact on the application&amp;rsquo;s response time.&lt;/p>
&lt;p>&lt;a href="https://changelog.com/gotime/257">How Pinterest delivers software at scale&lt;/a> (Go Time, podcast). A very refreshing discussion about real-world technical challenges large organizations face.&lt;/p>
&lt;p>&lt;a href="https://www.se-radio.net/2022/11/episode-539-adam-dymitruk-on-event-modeling/">Adam Dymitruk on Event Modeling&lt;/a> (Software Engineering Radio, podcast). &lt;a href="https://eventmodeling.org/posts/what-is-event-modeling/">Event Modeling: what is it?&lt;/a>&lt;/p></description></item><item><title>Bookmarks (issue 8)</title><link>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</guid><description>&lt;p>&lt;a href="https://changelog.com/podcast/510">Taking Postgres serverless&lt;/a> (Changelog). &lt;a href="https://www.youtube.com/watch?v=rES0yzeERns">Neon: Serverless PostgreSQL&lt;/a> (Heikki Linnakangas @ Carnegie Mellon University).&lt;/p>
&lt;p>&lt;a href="https://brooker.co.za/blog/2022/04/11/simulation.html">Simple simulations for system builders&lt;/a> (&lt;a href="https://twitter.com/MarcJBrooker">Marc Brooker&lt;/a>). System designers care about questions like &amp;ldquo;How will the system behave under overload?&amp;rdquo; or &amp;ldquo;How sensitive is the design to latency?&amp;rdquo;. By &amp;ldquo;writing small simulators that simulate the behaviour of simple models&amp;rdquo;, Marc shows an approach to explore and reason about the possible answers to such questions.&lt;/p>
&lt;p>&lt;a href="https://fasterthanli.me/articles/the-http-crash-course-nobody-asked-for">The HTTP crash course nobody asked for&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://www.industrialempathy.com/posts/design-docs-at-google/">Design docs at Google&lt;/a>. When not to write a design doc: A clear indicator that a doc might &lt;em>not&lt;/em> be necessary is when a design doc is an implementation manual, that doesn&amp;rsquo;t go into trade-offs, alternatives, and explanation of the decision-making; â€” write the actual application instead.&lt;/p></description></item><item><title>Bookmarks (issue 7)</title><link>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</guid><description>&lt;p>&lt;a href="https://www.acquired.fm/episodes/amazon-com">The complete history and strategy of Amazon.com&lt;/a> and &lt;a href="https://www.acquired.fm/episodes/amazon-web-services">The complete history and strategy of AWS&lt;/a> (Acquired podcast).
In the world, where the growth of storages is massively outpacing the improvements in the speed of the Internet, a database is the most sticky technology. That&amp;rsquo;s how AWS locks the enterprises in: itâ€™s impossible to migrate the enterprise-grade of data out of AWS (&amp;ldquo;It took thirty years for Amazon to migrate off Oracle to AWS&amp;rdquo;).&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/playlist?list=PLSE8ODhjZXjaKScG3l0nuOiDTTqpfnWFf">CMU Intro to Database systems / Fall 2022&lt;/a> (Carnegie Mellon University); &lt;a href="https://www.qwertee.io/blog/postgresql-b-tree-index-explained-part-1/">PostgreSQL B-Tree index explained, pt. 1&lt;/a> (Qwertee).&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/blogs/database/build-a-cqrs-event-store-with-amazon-dynamodb/">Build a CQRS event store with Amazon DynamoDB&lt;/a> (AWS).&lt;/p></description></item><item><title>Bookmarks (issue 6)</title><link>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/watch?v=x9_9iaVszpM">Kubernetes antipatterns: CPU Limits&lt;/a>. Always define CPU requests; never define CPU limits.&lt;/p>
&lt;p>&lt;a href="https://www.depesz.com/2021/06/20/explaining-the-unexplainable-part-6-buffers/">Explaining the unexplainable: buffers in PostgreSQL&lt;/a>. Shared buffers are those, which&amp;rsquo;re&amp;rsquo; &amp;ldquo;shared&amp;rdquo; between several DB sessions, i.e. data pages, indices, etc; local buffers, are &amp;ldquo;local&amp;rdquo; to a session, i.e. for temporal tables; temp buffers are for intermediate objects, i.e. when the DBMS does hashing and sorting.&lt;/p>
&lt;p>&lt;a href="https://www.geekabyte.io/2022/08/rust-iterator-pattern-with-iter.html">Rust Iterator pattern with &lt;code>iter()&lt;/code>, &lt;code>into_iter()&lt;/code> and &lt;code>iter_mut()&lt;/code> methods&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://github.com/golang/go/discussions/54245">Standard iterator interface in Go&lt;/a> (Ian Lance Taylor via GitHub Discussions).&lt;/p></description></item><item><title>Bookmarks (issue 5)</title><link>https://vladimir.varank.in/notes/2022/07/bookmarks-5/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/07/bookmarks-5/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/user/devinebass">Scott&amp;rsquo;s Bass Lessons&lt;/a> and &lt;a href="https://www.youtube.com/c/BassBuzz">BassBuzz&lt;/a> on YouTube. I&amp;rsquo;m learning how to play bass guitar ðŸŽ¸ now. So far, these two channels were the most helpful with both the practice lessons, and the inspiration to move forward.&lt;/p>
&lt;p>&lt;a href="https://youtu.be/A_mstzRGfIE">Event-driven architecture done right&lt;/a> (Tim Berglung, Devoxx Poland 2021). Try to learn what you&amp;rsquo;re trying to do, before you elaborate the architecture, if uncertainty is very high, and you donâ€™t know exactly what businesses are asking. Just start with something (architecturally) simple.&lt;/p>
&lt;p>&lt;a href="https://www.usenix.org/system/files/atc22-vig.pdf">Amazon DynamoDB: A Scalable, Predictably Performant, and Fully Managed NoSQL Database Service&lt;/a> (whitepaper). &lt;a href="https://brooker.co.za/blog/2022/07/12/dynamodb.html">The analysis of the paper&lt;/a> (Marc Brooker).&lt;/p>
&lt;p>&lt;a href="https://www.acquired.fm/episodes/the-playbook-lessons-from-200-company-stories">Acquired&amp;rsquo;s lessons learned from 200 company stories&lt;/a>: optimism always wins (Sony); nothing can stop the will to survive (Nvidia); it&amp;rsquo;s never too late (TSMC); focus on what makes your beer taste better (Amazon and all utility companies); don&amp;rsquo;t be talent â€” own the business (Oprah, Tail Swift); youâ€™ll get the partners you ask for (Amazon&amp;rsquo;s &amp;ldquo;If youâ€™re not on my bus, get off&amp;rdquo;), and more.&lt;/p></description></item><item><title>Bookmarks (issue 4)</title><link>https://vladimir.varank.in/notes/2022/06/bookmarks-4/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/06/bookmarks-4/</guid><description>&lt;p>&lt;a href="https://tip.golang.org/doc/go1.19">Go 1.19beta1&lt;/a>. As usual, lots of good improvements in the language&amp;rsquo;s runtime and the compiler, with one particularly interesting addition being the new &amp;ldquo;knob&amp;rdquo; &lt;code>runtime/debug.SetMemoryLimit&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://www.grammarly.com/blog/gender-neutral-language/">How to use gender-neutral language at work and in life&lt;/a> (Grammarly). &amp;ldquo;Luckily, the English language is relatively gender-neutral in many respects&amp;rdquo; [at least, when compared to Russian and German languages].&lt;/p>
&lt;p>&lt;a href="https://developer.apple.com/videos/play/wwdc2022/10092">Meet passkeys&lt;/a> (Apple) and &lt;a href="https://www.youtube.com/watch?v=mjHIt9lDBgA">Everything you want to know about WebAuthn&lt;/a> (OktaDev). As you can guess, I&amp;rsquo;m very excited with Apple stepping onto the path to a passwordless future, while betting on WebAuthn standard.&lt;/p>
&lt;p>&lt;a href="https://developer.apple.com/videos/play/wwdc2022/10077/">Replace CAPTCHAs with Private Access Tokens&lt;/a> (Apple),
&lt;a href="https://www.fastly.com/blog/private-access-tokens-stepping-into-the-privacy-respecting-captcha-less">Private Access Tokens: stepping into the privacy-respecting, CAPTCHA-less future we were promised&lt;/a> (Fastly),
&lt;a href="https://blog.cloudflare.com/eliminating-captchas-on-iphones-and-macs-using-new-standard/">Private Access Tokens: eliminating CAPTCHAs on iPhones and Macs with open standards&lt;/a> (Cloudflare).&lt;/p></description></item><item><title>Bookmarks (issue 3)</title><link>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</guid><description>&lt;p>&lt;a href="https://exercism.org/tracks/rust">Rust tracks on Exercism&lt;/a>. More than 100 coding exercises to learn &lt;a href="https://www.rust-lang.org/">Rust&lt;/a> through practice.&lt;/p>
&lt;p>&lt;a href="https://www.postgresql.org/about/news/postgresql-anonymizer-10-privacy-by-design-for-postgres-2452/">PostgreSQL Anonymizer 1.0&lt;/a>. A PostgreSQL extension for declarative data masking (&lt;a href="https://postgresql-anonymizer.readthedocs.io/en/latest/">docs and examples&lt;/a>).&lt;/p>
&lt;p>&lt;a href="https://postgrespro.com/blog/pgsql/5969493">Queries in PostgreSQL: 4. Index scan&lt;/a> (Postgres Pro). An in-depth overview of how PostgreSQL decides if it will use an index.
One particular thing I had no idea about before I read the article was that &amp;ldquo;The Index Scan cost is highly dependent on the &lt;em>correlation&lt;/em> between the physical order of the tuples on disk and the order in which the access method returns the IDs&amp;rdquo;. That explains several cases from my own experience, where postgres kept using &amp;ldquo;unexpected&amp;rdquo; sequential scans, after we added &amp;ldquo;another index&amp;rdquo; to the database.&lt;/p>
&lt;p>&lt;a href="https://www.micahlerner.com/2022/04/24/monarch-googles-planet-scale-in-memory-time-series-database.html">Monarch: Googleâ€™s planet-scale in-memory time series database&lt;/a> (&lt;a href="https://twitter.com/micahlerner">Micah Lerner&lt;/a>). A review of the paper (&lt;a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/d84ab6c93881af998de877d0070a706de7bec6d8.pdf">PDF&lt;/a>), which describes the latest iteration of Google&amp;rsquo;s in-house metrics system.&lt;/p>
&lt;p>&lt;a href="https://google.aip.dev/">Googleâ€™s API Improvement Proposals (AIP)&lt;/a>. A collection of design documents that summarize Google&amp;rsquo;s API design decisions.&lt;/p></description></item><item><title>Bookmarks (issue 2)</title><link>https://vladimir.varank.in/notes/2022/04/bookmarks-2/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/04/bookmarks-2/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Digital_object_identifier">Digital object identifier (DOI)&lt;/a> (Wikipedia). A DOI is a persistent identifier or handle used to identify various objects uniquely. It aims to be &amp;ldquo;resolvable&amp;rdquo;, usually to some form of access to the information object to which the DOI refers. This is achieved by binding the DOI to metadata about the object, such as a URL. Thus, by being actionable and interoperable, a DOI differs from identifiers such as ISBNs, which aim only to identify their referents uniquely.&lt;/p>
&lt;p>&lt;a href="https://principledgraphql.com/operations">Operations principles: securely deploying the graph to production at scale&lt;/a> (Principled GraphQL). Lots of things listed there apply to any sort of APIs â€” not only to GraphQL.&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=Dvb7ooaFJaU">Songs your English teacher will NEVER teach!&lt;/a> (Learn English with Papa Teach Me). Vocabulary from &amp;ldquo;Savage&amp;rdquo;, &amp;ldquo;WAP&amp;rdquo;, and &amp;ldquo;34+35&amp;rdquo;. This video is &lt;em>definitely&lt;/em> not for kids!&lt;/p>
&lt;p>&lt;a href="https://www.grammarly.com/blog/phrases-spring-clean/">8 phrases to spring-clean from your emails&lt;/a> (Grammarly).&lt;/p>
&lt;p>&lt;a href="https://www.acquired.fm/episodes/platforms-and-power-with-hamilton-helmer-and-chenyi-shi">Platforms and Power&lt;/a> (Acquired). &amp;ldquo;7 Powers&amp;rdquo; author Hamilton Helmer and Chenyi Shi (Strategy Capital), joined Acquired Podcast to discuss platform businesses, and how the &amp;ldquo;Power&amp;rdquo; framework applies to them.&lt;/p>
&lt;p>&lt;a href="https://medium.com/@matryer/halfthings-a8c72365617c">Halfthings&lt;/a> (&lt;a href="https://twitter.com/matryer/">Mat Ryer&lt;/a>).
Building something for the users to play with, to touch, to feel, to break, makes all the difference and moves the conversations away from the meta.
Doing &amp;ldquo;one thing&amp;rdquo; or &amp;ldquo;building an MVP&amp;rdquo; can easily pull you into a &amp;ldquo;too much&amp;rdquo; for a validation phase. Build a &amp;ldquo;&lt;em>halfthing&lt;/em>&amp;rdquo; instead.&lt;/p></description></item><item><title>Bookmarks (issue 1)</title><link>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</guid><description>&lt;p>&lt;a href="https://planetscale.com/blog/generics-can-make-your-go-code-slower">Generics can make your Go code slower&lt;/a> (PlanetScale):&lt;/p>
&lt;ol>
&lt;li>boxing vs monomorphization vs partial monomorphization (&amp;ldquo;GCShape stenciling with Dictionaries&amp;rdquo;)&lt;/li>
&lt;li>interface inlining doesn&amp;rsquo;t work well with the 1.18&amp;rsquo;s compiler&lt;/li>
&lt;li>generics work well for byte sequences (&lt;code>string | []byte&lt;/code>)&lt;/li>
&lt;li>in simple cases, generics can be useful for function callbacks.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://engineering.fb.com/2022/03/30/security/de-identified-authentication-at-scale/">How Meta enables de-identified authentication at scale&lt;/a>. The rational, the use-cases, and a high-level architecture of Meta&amp;rsquo;s Anonymous Credential Service (ACS).&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/blogs/database/hidden-dangers-of-duplicate-key-violations-in-postgresql-and-how-to-avoid-them/">Hidden dangers of duplicate key violations in PostgreSQL&lt;/a> (AWS). &lt;code>INSERT â€¦ ON CONFLICT&lt;/code> has additional benefits, if compared to relying on PostgreSQL&amp;rsquo;s &amp;ldquo;duplicate key violation&amp;rdquo; error:&lt;/p>
&lt;ol>
&lt;li>no additional space needed for dead tuples&lt;/li>
&lt;li>less autovacuum required&lt;/li>
&lt;li>transaction IDs aren&amp;rsquo;t used for nothing, preventing (postponing) the potential trx-id wraparound.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://aws.amazon.com/blogs/containers/diving-into-iam-roles-for-service-accounts/">Diving into AWS IAM Roles for (Kubernetes) Service Accounts (IRSA)&lt;/a>.&lt;/p></description></item><item><title>Go talks I keep coming back to</title><link>https://vladimir.varank.in/notes/2022/02/go-talks-i-keep-coming-back-to/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/02/go-talks-i-keep-coming-back-to/</guid><description>&lt;p>I have a personal list of &amp;ldquo;top conference talks&amp;rdquo; that I keep referring back to, even after years of working with Go:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=3RkRpS2UV80">Go profiling from bottom up&lt;/a>&lt;/strong>, &lt;a href="https://github.com/felixge">Felix GeisendÃ¶rfer&lt;/a>, GoLab 2021. Felix explains what&amp;rsquo;s under the hood of Go&amp;rsquo;s pprof.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=S_1YfTfuWmo">Evolving the Go Memory Manager&amp;rsquo;s RAM and CPU Efficiency&lt;/a>&lt;/strong>, Michael Knyszek, GopherCon 2020&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=h0s8CWpIKdg">Death by 3,000 Timers: Streaming Video-on-Demand for Cable TV&lt;/a>&lt;/strong>, &lt;a href="https://twitter.com/chris_csguy">Chris Hines&lt;/a>, GopherCon 2019. Chris explains the mechanics behind the Go runtime scheduler, following the anomaly cases, they observed, when ran a Go application on a physical machine, with large number of CPU cores.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=5zXAHh5tJqQ">Rethinking Classical Concurrency Patterns&lt;/a>&lt;/strong> (&lt;a href="https://drive.google.com/file/d/1nPdvhB0PutEJzdCq5ms6UI58dp50fcAN/view">Slides&lt;/a>), &lt;a href="https://github.com/bcmills">Bryan C. Mills&lt;/a>, GopherCon 2018. Brian demos the implementation of typical concurrency patterns, following the famous Go proverb: &amp;ldquo;Don&amp;rsquo;t communicate by sharing memory; share memory by communicating.&amp;rdquo;&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=ZfdF8gPinlU">GoLab Keynote&lt;/a>&lt;/strong>, &lt;a href="https://twitter.com/goinggodotnet">Bill Kennedy&lt;/a>, GoLab 2018. Bill demoes the ways to reason about the performance of a Go application, with the help of Go runtime tracer.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=YHRO5WQGh0k">The Scheduler Saga&lt;/a>&lt;/strong>, Kavya Joshi, GopherCon 2018. Kavya shows what stands behind the magic of Go runtime.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=1v3RilVOTKM">Restarting Go applications gracefully&lt;/a>&lt;/strong> (&lt;em>in Russian&lt;/em>), &lt;a href="https://sergey.kamardin.org/">Ð¡ÐµÑ€Ð³ÐµÐ¹ ÐšÐ°Ð¼Ð°Ñ€Ð´Ð¸Ð½&lt;/a>, GopherCon Russia 2018&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=8hQG7QlcLBk">Advanced Testing with Go&lt;/a>&lt;/strong>, &lt;a href="https://twitter.com/mitchellh">Mitchell Hashimoto&lt;/a>, GopherCon 2017&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=KBZlN0izeiY">Understanding Channels&lt;/a>&lt;/strong>, Kavya Joshi, GopherCon 2017. Kavya explains how channels work under the hood.&lt;/li>
&lt;/ul>
&lt;p>Keeping the list here, in public, should help my future self, in a situation where I&amp;rsquo;m stuck with a &lt;em>mind-blocker&lt;/em>, and I need to quickly pull out a piece of community wisdom from the backyards of my memory. The list isn&amp;rsquo;t meant to be complete, and I expect to add more links here, moving forward.&lt;/p>
&lt;p>&lt;em>Did I miss any? Share your suggestions with me on &lt;a href="https://twitter.com/tvii/status/1491136758792155139">Twitter&lt;/a>.&lt;/em>&lt;/p></description></item></channel></rss>