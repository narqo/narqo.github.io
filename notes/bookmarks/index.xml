<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bookmarks on Vladimir Varankin</title><link>https://vladimir.varank.in/notes/bookmarks/</link><description>Recent content in bookmarks on Vladimir Varankin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 31 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vladimir.varank.in/notes/bookmarks/index.xml" rel="self" type="application/rss+xml"/><item><title>Bookmarks (issue 10)</title><link>https://vladimir.varank.in/notes/2022/12/bookmarks-10/</link><pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/12/bookmarks-10/</guid><description>The 22 BEST Basslines of 2022 (Patrick Hunter).
Building a custom code search index in Go for searchcodecom (Ben Boyter).
Kubernetes resources under the hood. This year was rich for deep tech articles and talks, that explain how CPU requests and limits work in Kubernetes. This three-part series is no exception.
John Carmack on resigning from Meta. A post that spawned many intresting opinions on the internet: &amp;ldquo;You can&amp;rsquo;t have top people in X (performance, security, whatever) work for you and only half-care about X at the same time. They will move&amp;rdquo;.</description></item><item><title>Bookmarks (issue 9)</title><link>https://vladimir.varank.in/notes/2022/11/bookmarks-9/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/11/bookmarks-9/</guid><description>Kubernetes removals, deprecations, and major changes in 1.26.
Performance evaluation of autoscaling strategies in Kubernetes (Kewyn Akshlley). tl;dr; After comparing the performance of horizontal and vertical autoscaling using synthetic load, the horizontal autoscaling seems more efficient, reacts faster to the load variation, and results in a lower impact on the application&amp;rsquo;s response time.
How Pinterest delivers software at scale (Go Time, podcast). A very refreshing discussion about real-world technical challenges large organizations face.
Adam Dymitruk on Event Modeling (Software Engineering Radio, podcast). Event Modeling: what is it?</description></item><item><title>Bookmarks (issue 8)</title><link>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/10/bookmarks-8/</guid><description>Taking Postgres serverless (Changelog). Neon: Serverless PostgreSQL (Heikki Linnakangas @ Carnegie Mellon University).
Simple simulations for system builders (Marc Brooker). System designers care about questions like &amp;ldquo;How will the system behave under overload?&amp;rdquo; or &amp;ldquo;How sensitive is the design to latency?&amp;rdquo;. By &amp;ldquo;writing small simulators that simulate the behaviour of simple models&amp;rdquo;, Marc shows an approach to explore and reason about the possible answers to such questions.
The HTTP crash course nobody asked for.
Design docs at Google. When not to write a design doc: A clear indicator that a doc might not be necessary is when a design doc is an implementation manual, that doesn&amp;rsquo;t go into trade-offs, alternatives, and explanation of the decision-making; â€” write the actual application instead.</description></item><item><title>Bookmarks (issue 7)</title><link>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/09/bookmarks-7/</guid><description>The complete history and strategy of Amazon.com and The complete history and strategy of AWS (Acquired podcast). In the world, where the growth of storages is massively outpacing the improvements in the speed of the Internet, a database is the most sticky technology. That&amp;rsquo;s how AWS locks the enterprises in: itâ€™s impossible to migrate the enterprise-grade of data out of AWS (&amp;ldquo;It took thirty years for Amazon to migrate off Oracle to AWS&amp;rdquo;).
CMU Intro to Database systems / Fall 2022 (Carnegie Mellon University); PostgreSQL B-Tree index explained, pt. 1 (Qwertee).
Build a CQRS event store with Amazon DynamoDB (AWS).</description></item><item><title>Bookmarks (issue 6)</title><link>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/08/bookmarks-6/</guid><description>Kubernetes antipatterns: CPU Limits. Always define CPU requests; never define CPU limits.
Explaining the unexplainable: buffers in PostgreSQL. Shared buffers are those, which&amp;rsquo;re&amp;rsquo; &amp;ldquo;shared&amp;rdquo; between several DB sessions, i.e. data pages, indices, etc; local buffers, are &amp;ldquo;local&amp;rdquo; to a session, i.e. for temporal tables; temp buffers are for intermediate objects, i.e. when the DBMS does hashing and sorting.
Rust Iterator pattern with iter(), into_iter() and iter_mut() methods.
Standard iterator interface in Go (Ian Lance Taylor via GitHub Discussions).</description></item><item><title>Bookmarks (issue 5)</title><link>https://vladimir.varank.in/notes/2022/07/bookmarks-5/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/07/bookmarks-5/</guid><description>Scott&amp;rsquo;s Bass Lessons and BassBuzz on YouTube. I&amp;rsquo;m learning how to play bass guitar ðŸŽ¸ now. So far, these two channels were the most helpful with both the practice lessons, and the inspiration to move forward.
Event-driven architecture done right (Tim Berglung, Devoxx Poland 2021). Try to learn what you&amp;rsquo;re trying to do, before you elaborate the architecture, if uncertainty is very high, and you donâ€™t know exactly what businesses are asking. Just start with something (architecturally) simple.
Amazon DynamoDB: A Scalable, Predictably Performant, and Fully Managed NoSQL Database Service (whitepaper). The analysis of the paper (Marc Brooker).
Acquired&amp;rsquo;s lessons learned from 200 company stories: optimism always wins (Sony); nothing can stop the will to survive (Nvidia); it&amp;rsquo;s never too late (TSMC); focus on what makes your beer taste better (Amazon and all utility companies); don&amp;rsquo;t be talent â€” own the business (Oprah, Tail Swift); youâ€™ll get the partners you ask for (Amazon&amp;rsquo;s &amp;ldquo;If youâ€™re not on my bus, get off&amp;rdquo;), and more.</description></item><item><title>Bookmarks (issue 4)</title><link>https://vladimir.varank.in/notes/2022/06/bookmarks-4/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/06/bookmarks-4/</guid><description>Go 1.19beta1. As usual, lots of good improvements in the language&amp;rsquo;s runtime and the compiler, with one particularly interesting addition being the new &amp;ldquo;knob&amp;rdquo; runtime/debug.SetMemoryLimit.
How to use gender-neutral language at work and in life (Grammarly). &amp;ldquo;Luckily, the English language is relatively gender-neutral in many respects&amp;rdquo; [at least, when compared to Russian and German languages].
Meet passkeys (Apple) and Everything you want to know about WebAuthn (OktaDev). As you can guess, I&amp;rsquo;m very excited with Apple stepping onto the path to a passwordless future, while betting on WebAuthn standard.
Replace CAPTCHAs with Private Access Tokens (Apple), Private Access Tokens: stepping into the privacy-respecting, CAPTCHA-less future we were promised (Fastly), Private Access Tokens: eliminating CAPTCHAs on iPhones and Macs with open standards (Cloudflare).</description></item><item><title>Bookmarks (issue 3)</title><link>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/05/bookmarks-3/</guid><description>Rust tracks on Exercism. More than 100 coding exercises to learn Rust through practice.
PostgreSQL Anonymizer 1.0. A PostgreSQL extension for declarative data masking (docs and examples).
Queries in PostgreSQL: 4. Index scan (Postgres Pro). An in-depth overview of how PostgreSQL decides if it will use an index. One particular thing I had no idea about before I read the article was that &amp;ldquo;The Index Scan cost is highly dependent on the correlation between the physical order of the tuples on disk and the order in which the access method returns the IDs&amp;rdquo;. That explains several cases from my own experience, where postgres kept using &amp;ldquo;unexpected&amp;rdquo; sequential scans, after we added &amp;ldquo;another index&amp;rdquo; to the database.
Monarch: Googleâ€™s planet-scale in-memory time series database (Micah Lerner). A review of the paper (PDF), which describes the latest iteration of Google&amp;rsquo;s in-house metrics system.
Googleâ€™s API Improvement Proposals (AIP). A collection of design documents that summarize Google&amp;rsquo;s API design decisions.</description></item><item><title>Bookmarks (issue 2)</title><link>https://vladimir.varank.in/notes/2022/04/bookmarks-2/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/04/bookmarks-2/</guid><description>Digital object identifier (DOI) (Wikipedia). A DOI is a persistent identifier or handle used to identify various objects uniquely. It aims to be &amp;ldquo;resolvable&amp;rdquo;, usually to some form of access to the information object to which the DOI refers. This is achieved by binding the DOI to metadata about the object, such as a URL. Thus, by being actionable and interoperable, a DOI differs from identifiers such as ISBNs, which aim only to identify their referents uniquely.
Operations principles: securely deploying the graph to production at scale (Principled GraphQL). Lots of things listed there apply to any sort of APIs â€” not only to GraphQL.
Songs your English teacher will NEVER teach! (Learn English with Papa Teach Me). Vocabulary from &amp;ldquo;Savage&amp;rdquo;, &amp;ldquo;WAP&amp;rdquo;, and &amp;ldquo;34+35&amp;rdquo;. This video is definitely not for kids!
8 phrases to spring-clean from your emails (Grammarly).
Platforms and Power (Acquired). &amp;ldquo;7 Powers&amp;rdquo; author Hamilton Helmer and Chenyi Shi (Strategy Capital), joined Acquired Podcast to discuss platform businesses, and how the &amp;ldquo;Power&amp;rdquo; framework applies to them.
Halfthings (Mat Ryer). Building something for the users to play with, to touch, to feel, to break, makes all the difference and moves the conversations away from the meta. Doing &amp;ldquo;one thing&amp;rdquo; or &amp;ldquo;building an MVP&amp;rdquo; can easily pull you into a &amp;ldquo;too much&amp;rdquo; for a validation phase. Build a &amp;ldquo;halfthing&amp;rdquo; instead.</description></item><item><title>Bookmarks (issue 1)</title><link>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/03/bookmarks-1/</guid><description>Generics can make your Go code slower (PlanetScale):
boxing vs monomorphization vs partial monomorphization (&amp;ldquo;GCShape stenciling with Dictionaries&amp;rdquo;) interface inlining doesn&amp;rsquo;t work well with the 1.18&amp;rsquo;s compiler generics work well for byte sequences (string | []byte) in simple cases, generics can be useful for function callbacks. How Meta enables de-identified authentication at scale. The rational, the use-cases, and a high-level architecture of Meta&amp;rsquo;s Anonymous Credential Service (ACS).
Hidden dangers of duplicate key violations in PostgreSQL (AWS). INSERT â€¦ ON CONFLICT has additional benefits, if compared to relying on PostgreSQL&amp;rsquo;s &amp;ldquo;duplicate key violation&amp;rdquo; error:
no additional space needed for dead tuples less autovacuum required transaction IDs aren&amp;rsquo;t used for nothing, preventing (postponing) the potential trx-id wraparound. Diving into AWS IAM Roles for (Kubernetes) Service Accounts (IRSA).</description></item><item><title>Go talks I keep coming back to</title><link>https://vladimir.varank.in/notes/2022/02/go-talks-i-keep-coming-back-to/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://vladimir.varank.in/notes/2022/02/go-talks-i-keep-coming-back-to/</guid><description>I have a personal list of &amp;ldquo;top conference talks&amp;rdquo; that I keep referring back to, even after years of working with Go:
Go profiling from bottom up, Felix GeisendÃ¶rfer, GoLab 2021. Felix explains what&amp;rsquo;s under the hood of Go&amp;rsquo;s pprof. Evolving the Go Memory Manager&amp;rsquo;s RAM and CPU Efficiency, Michael Knyszek, GopherCon 2020 Death by 3,000 Timers: Streaming Video-on-Demand for Cable TV, Chris Hines, GopherCon 2019. Chris explains the mechanics behind the Go runtime scheduler, following the anomaly cases, they observed, when ran a Go application on a physical machine, with large number of CPU cores. Rethinking Classical Concurrency Patterns (Slides), Bryan C. Mills, GopherCon 2018. Brian demos the implementation of typical concurrency patterns, following the famous Go proverb: &amp;ldquo;Don&amp;rsquo;t communicate by sharing memory; share memory by communicating.&amp;rdquo; GoLab Keynote, Bill Kennedy, GoLab 2018. Bill demoes the ways to reason about the performance of a Go application, with the help of Go runtime tracer. The Scheduler Saga, Kavya Joshi, GopherCon 2018. Kavya shows what stands behind the magic of Go runtime. Restarting Go applications gracefully (in Russian), Ð¡ÐµÑ€Ð³ÐµÐ¹ ÐšÐ°Ð¼Ð°Ñ€Ð´Ð¸Ð½, GopherCon Russia 2018 Advanced Testing with Go, Mitchell Hashimoto, GopherCon 2017 Understanding Channels, Kavya Joshi, GopherCon 2017. Kavya explains how channels work under the hood. Keeping the list here, in public, should help my future self, in a situation where I&amp;rsquo;m stuck with a mind-blocker, and I need to quickly pull out a piece of community wisdom from the backyards of my memory. The list isn&amp;rsquo;t meant to be complete, and I expect to add more links here, moving forward.
Did I miss any? Share your suggestions with me on Twitter.</description></item></channel></rss>